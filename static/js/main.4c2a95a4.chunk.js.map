{"version":3,"sources":["components/ImageContainer.js","components/ImgCard/index.js","components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["ImageContainer","props","react_default","a","createElement","className","children","ImgCard","onClick","checkScore","shuffleImages","id","alt","name","src","image","NavBar","currentScore","topScore","App","state","pics","clicked","shuffle","array","i","length","j","Math","floor","random","_ref","event","parseInt","target","_this","setState","clickedId","includes","alert","push","_this2","this","NavBar_NavBar","components_ImageContainer","map","img","components_ImgCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uuqEAWeA,MATf,SAAwBC,GACpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,UADtC,YCSOC,MAVf,SAAiBN,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOG,QAASP,EAAMQ,YACnCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBG,QAASP,EAAMS,eAC5CR,EAAAC,EAAAC,cAAA,OAAKO,GAAIV,EAAMU,GAAIC,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,iBCOxCC,MAVf,SAAgBf,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCAAhB,qBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2CAAhB,2BACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gDAAgDM,GAAG,gBAAnE,eAA+FV,EAAMgB,aAArG,iBAAiIhB,EAAMiB,YCgE9HC,6MAjEbC,MAAQ,CACNC,KAAMA,EACNJ,aAAc,EACdC,SAAU,EACVI,QAAS,MAGXC,QAAU,SAAAC,GACR,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,KAGTd,cAAgB,SAAAsB,GACd,IAAIrB,EAAKsB,SAASD,EAAME,OAAOvB,IAC3BU,EAAOc,EAAKZ,QAAQY,EAAKf,MAAMC,MACnCc,EAAKC,SAAS,CAAEf,QAAQc,EAAK1B,WAAWE,OAG1CF,WAAa,SAAA4B,GACQF,EAAKf,MAAME,QAEbgB,SAASD,IACxBE,MAAM,cACFJ,EAAKf,MAAMH,aAAekB,EAAKf,MAAMF,UACvCiB,EAAKC,SAAS,CACZlB,SAAUiB,EAAKf,MAAMH,aACrBA,aAAc,EACdK,QAAS,OAIba,EAAKf,MAAME,QAAQkB,KAAKH,GACxBF,EAAKC,SAAS,CACZd,QAASa,EAAKf,MAAME,QACpBL,aAAckB,EAAKf,MAAMH,aAAe,8EAKrC,IAAAwB,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuC,EAAD,CACA1B,aAAcyB,KAAKtB,MAAMH,aACzBC,SAAUwB,KAAKtB,MAAMF,WAErBhB,EAAAC,EAAAC,cAACwC,EAAD,KACGF,KAAKtB,MAAMC,KAAKwB,IAAI,SAAAC,GAAG,OACtB5C,EAAAC,EAAAC,cAAC2C,EAAD,CACErC,cAAe+B,EAAK/B,cACpBC,GAAImC,EAAInC,GACRE,KAAMiC,EAAIjC,KACVE,MAAO+B,EAAI/B,mBAxDPiC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4c2a95a4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ImageContainer(props) {\n    return (\n        <div>\n            <div className=\"container\">{props.children}</div>;\n        </div>\n    )\n\n}\n\nexport default ImageContainer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImgCard(props) {\n  return (\n    <div className=\"card\" onClick={props.checkScore}>\n      <div className=\"img-container\" onClick={props.shuffleImages}>\n        <img id={props.id} alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImgCard;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction NavBar(props) {\n  return (\n    <nav className=\"navbar navbar-light bg-dark\">\n      <span className=\"navbar-brand mb-0 text-light\">React Clicky Game</span>\n      <span className=\"nav-item navbar-text mb-0 h3 text-light\">Click an image to begin</span>\n      <span className=\"nav-item navbar-text score mb-0 h2 text-light\" id=\"currentScore\">Your Score: {props.currentScore} | Top Score: {props.topScore}</span>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport pics from \"./pics.json\"\nimport ImageContainer from \"./components/ImageContainer\";\nimport ImgCard from \"./components/ImgCard\";\nimport NavBar from \"./components/NavBar/NavBar\";\n\n\nclass App extends Component {\n  state = {\n    pics: pics,\n    currentScore: 0,\n    topScore: 0,\n    clicked: []\n  };\n\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n    return array;\n  }\n\n  shuffleImages = event => {\n    let id = parseInt(event.target.id);\n    let pics = this.shuffle(this.state.pics);\n    this.setState({ pics }, this.checkScore(id));\n  }\n\n  checkScore = clickedId => {\n    let clickedArray = this.state.clicked;\n\n    if (clickedArray.includes(clickedId)) {\n      alert(\"Try again!\");\n      if (this.state.currentScore > this.state.topScore) {\n        this.setState({\n          topScore: this.state.currentScore,\n          currentScore: 0,\n          clicked: []\n        });\n      }\n    } else {\n      this.state.clicked.push(clickedId);\n      this.setState({\n        clicked: this.state.clicked,\n        currentScore: this.state.currentScore + 1\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar \n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n        />\n        <ImageContainer>\n          {this.state.pics.map(img => (\n            <ImgCard\n              shuffleImages={this.shuffleImages}\n              id={img.id}\n              name={img.name}\n              image={img.image}\n            />\n          ))}\n        </ImageContainer>\n      </div>\n    )\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}